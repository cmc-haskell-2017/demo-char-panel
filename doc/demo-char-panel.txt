-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Экран выбора персонажа для ролевой игры.
--   
--   Экран выбора персонажа для ролевой игры.
@package demo-char-panel
@version 0.1

module Game.Utils

-- | Изменить положение мыши.
modifyEventMouse :: (Point -> Point) -> Event -> Event

-- | Пересчитать положение мыши относительно заданной точки.
untranslateEvent :: Vector -> Event -> Event

-- | Пересчитать положение мыши для масштабированного объекта.
unscaleEvent :: Float -> Float -> Event -> Event

-- | Построить прямоугольник с заданными координатами левой нижней и правой
--   верхней вершин.
rect :: Point -> Point -> Picture

-- | Прямоугольник с закруглёнными краями и границей заданной толщины.
roundedRect :: Color -> Color -> Float -> Float -> Float -> Float -> Picture

module Game.Panel.Field

-- | Поля ввода.
data Field

-- | Слайдер.
FieldSlider :: Slider -> Field

-- | Элемент выбора.
FieldSelector :: Selector -> Field

-- | Слайдер.
data Slider
Slider :: Int -> Int -> Int -> Bool -> Color -> Slider

-- | Минимальное значение слайдера.
[sliderMin] :: Slider -> Int

-- | Максимальное значение слайдера.
[sliderMax] :: Slider -> Int

-- | Текущее значение слайдера.
[sliderValue] :: Slider -> Int

-- | Выбран ли слайдер?
[sliderSelected] :: Slider -> Bool

-- | Цвет слайдера.
[sliderColor] :: Slider -> Color

-- | Элемент выбора.
data Selector
Selector :: [Picture] -> Int -> Selector

-- | Изображения различных вариантов.
[selectorPictures] :: Selector -> [Picture]

-- | Номер выбранного варианта.
[selectorIndex] :: Selector -> Int

-- | Именованное поле.
type NamedField = (String, Field)

-- | Список именованных полей.
type Fields = [NamedField]

-- | Попытаться привести поле к слайдеру.
toSlider :: Field -> Maybe Slider

-- | Попытаться привести поле к элементу выбора.
toSelector :: Field -> Maybe Selector

-- | Инициализировать слайдер.
initSlider :: Int -> Int -> Color -> Slider

-- | Инициализировать элемент выбора.
initSelector :: [Picture] -> Selector

-- | Положение слайдера (от 0 до 1).
sliderPosition :: Slider -> Float

-- | Текущий выбранный объект.
selectorCurrent :: Selector -> Picture

-- | Обработать события поля.
handleField :: Event -> Field -> Field

-- | Обработать события слайдера.
handleSlider :: Event -> Slider -> Slider

-- | Выделить шарик слайдера.
selectSlider :: Point -> Slider -> Slider

-- | Убрать выделения с шарика слайдера.
unselectSlider :: Slider -> Slider

-- | Передвинуть шарик слайдера.
moveSlider :: Float -> Slider -> Slider

-- | Обработать события элемента выбора.
handleSelector :: Event -> Selector -> Selector

-- | Обработать клик мыши.
handleSelectorClick :: Point -> Selector -> Selector

-- | Выбрать предыдущий вариант.
selectPrevious :: Selector -> Selector

-- | Выбрать следующий вариант.
selectNext :: Selector -> Selector

-- | Отобразить именованное поле.
drawNamedField :: (String -> Picture) -> NamedField -> Picture

-- | Отобразить поле.
drawField :: Field -> Picture

-- | Отобразить слайдер.
drawSlider :: Slider -> Picture

-- | Отобразить элемент выбора.
drawSelector :: Selector -> Picture

-- | Высота одного поля.
fieldHeight :: Float

-- | Ширина одного поля.
fieldWidth :: Float

-- | Длина слайдера.
sliderLength :: Float

-- | Радиус шарика слайдера.
sliderBallRadius :: Float

-- | Ширина элемента выбора.
selectorWidth :: Float

-- | Ширина одной из стрелок элемента выбора.
selectorArrowWidth :: Float

module Game.Panel

-- | Панель с полями ввода.
data Panel a
Panel :: Fields -> (Fields -> Maybe a) -> Panel a

-- | Поля ввода.
[panelFields] :: Panel a -> Fields

-- | Функция чтения поля.
[panelValue] :: Panel a -> Fields -> Maybe a

-- | Считать значение панели.
readPanel :: Panel a -> Maybe a

-- | Определить высоту панели.
panelHeight :: Panel a -> Float

-- | Имена полей панели.
panelFieldNames :: Panel a -> [String]

-- | Добавить ограничение на возможные значения панели.
constrainPanel :: (a -> Bool) -> Panel a -> Panel a

-- | Обработать каждое поле с его отступом по вертикали.
mapNamedFieldsWithOffset :: (Float -> NamedField -> a) -> Panel b -> [a]

-- | Создать панель с единственным полем.
mkField :: String -> Field -> (Field -> Maybe a) -> Panel a

-- | Создать панель с одним полем-слайдером.
slider :: String -> Int -> Int -> Color -> Panel Int

-- | Создать панель с одним полем выбора.
selector :: String -> (a -> Picture) -> [a] -> Panel a

-- | Отобразить панель.
drawPanel :: (String -> Picture) -> Panel a -> Picture

-- | Отобразить рамку и фон панели.
drawPanelBackground :: Float -> Picture

-- | Отобразить поле с заданным отступом.
drawFieldWithOffset :: (String -> Picture) -> Float -> NamedField -> Picture

-- | Обработка событий панели.
handlePanel :: Event -> Panel a -> Panel a

-- | Обработать событие для одного поля с заданным отступом.
handleFieldWithOffset :: Event -> Float -> Field -> Field
instance GHC.Base.Functor Game.Panel.Panel
instance GHC.Base.Applicative Game.Panel.Panel

module Game.Character

-- | Пол персонажа.
data Sex

-- | Мальчик.
Male :: Sex

-- | Девочка.
Female :: Sex

-- | Раса персонажа.
data Race

-- | Человек.
Human :: Race

-- | Эльф.
Elf :: Race

-- | Орк.
Orc :: Race

-- | Класс персонажа.
data Class

-- | Без класса.
NoClass :: Class

-- | Воин.
Warrior :: Class

-- | Маг.
Mage :: Class

-- | Персонаж.
data Character
Character :: CharType -> Float -> Attrs -> Character

-- | Пол, раса, класс.
[charType] :: Character -> CharType

-- | Оттенок кожи (темнее/светлее).
[charSkinTone] :: Character -> Float

-- | Атрибуты.
[charAttrs] :: Character -> Attrs

-- | Тип персонажа. Определяется полом, расой и классом.
data CharType
CharType :: Sex -> Race -> Class -> CharType

-- | Пол.
[charSex] :: CharType -> Sex

-- | Раса.
[charRace] :: CharType -> Race

-- | Класс.
[charClass] :: CharType -> Class

-- | Атрибуты персонажа, влияющие на способности.
data Attrs
Attrs :: Int -> Int -> Int -> Int -> Attrs

-- | Сила.
[attrStrength] :: Attrs -> Int

-- | Ловкость.
[attrDexterity] :: Attrs -> Int

-- | Здоровье.
[attrVitality] :: Attrs -> Int

-- | Энергия.
[attrEnergy] :: Attrs -> Int

-- | Сумма значений атрибутов.
attrsTotal :: Attrs -> Int

-- | Список всех полов.
allSexes :: [Sex]

-- | Список всех рас.
allRaces :: [Race]

-- | Список всех классов.
allClasses :: [Class]

-- | Список всех типов персонажей.
allCharTypes :: [CharType]
instance GHC.Classes.Eq Game.Character.CharType
instance GHC.Enum.Enum Game.Character.Class
instance GHC.Enum.Bounded Game.Character.Class
instance GHC.Show.Show Game.Character.Class
instance GHC.Classes.Eq Game.Character.Class
instance GHC.Enum.Enum Game.Character.Race
instance GHC.Enum.Bounded Game.Character.Race
instance GHC.Show.Show Game.Character.Race
instance GHC.Classes.Eq Game.Character.Race
instance GHC.Enum.Enum Game.Character.Sex
instance GHC.Enum.Bounded Game.Character.Sex
instance GHC.Show.Show Game.Character.Sex
instance GHC.Classes.Eq Game.Character.Sex

module Game

-- | Запустить экран выбора персонажа.
characterScreen :: IO ()

-- | Экран выбора персонажа.
data Screen
Screen :: Panel Character -> Maybe Character -> Images -> Screen

-- | Панель с настройками.
[screenPanel] :: Screen -> Panel Character

-- | Персонаж.
[screenChar] :: Screen -> Maybe Character

-- | Изображения.
[screenImages] :: Screen -> Images

-- | Инициализировать экран. При инициализации загружаются все необходимые
--   изображения.
initScreen :: IO Screen

-- | Инициализировать экран с заданными изображениями.
screenWithImages :: Images -> Screen

-- | Обновить панель на экране.
updateScreenPanel :: (Panel Character -> Panel Character) -> Screen -> Screen

-- | Панель настроек персонажа.
character :: Images -> Panel Character

-- | Настройки пола, расы и класса.
characterType :: Images -> Panel CharType

-- | Поле настройки цвета кожи. Поле может иметь значение от 0 до 1.
skinTone :: Panel Float

-- | Настройки атрибутов персонажа (сила, ловкость, здоровье и энергия).
--   Сумма значений атрибутов не может превышать <a>maxAttrsTotal</a>.
attrs :: Panel Attrs

-- | Изображения.
data Images
Images :: Picture -> (String -> Picture) -> (Sex -> Picture) -> (Race -> Picture) -> (Class -> Picture) -> (CharType -> Picture) -> Images

-- | Фон.
[imgBackground] :: Images -> Picture

-- | Изображения имён полей.
[imgFieldName] :: Images -> String -> Picture

-- | Изображения полов.
[imgSexName] :: Images -> Sex -> Picture

-- | Изображения рас.
[imgRaceName] :: Images -> Race -> Picture

-- | Изображения классов.
[imgClassName] :: Images -> Class -> Picture

-- | Изображения разных типов персонажей.
[imgCharType] :: Images -> CharType -> Picture

-- | Загрузка изображений.
loadImages :: IO Images

-- | Загрузка изображения для надписи.
loadTextImage :: String -> IO (Maybe Picture)

-- | Список всех имён полей для панели настроек персонажа.
allFieldNames :: [String]

-- | Загрузить все изображения для списка значений.
loadAll :: Eq a => (a -> IO (Maybe Picture)) -> [a] -> IO (a -> Picture)

-- | Загрузить изображение пола персонажа.
sexNameImage :: Sex -> IO (Maybe Picture)

-- | Загрузить изображение расы персонажа.
raceNameImage :: Race -> IO (Maybe Picture)

-- | Загрузить изображение класса персонажа.
classNameImage :: Class -> IO (Maybe Picture)

-- | Загрузить изображение персонажа.
charTypeImage :: CharType -> IO (Maybe Picture)

-- | Отрисовка экрана выбора персонажа.
drawScreen :: Screen -> Picture

-- | Цвет персонажа.
charSkinColor :: Character -> Color

-- | Диапазон цветов кожи для каждой расы.
raceSkinColorRange :: Race -> (Color, Color)

-- | Обработка событий экрана выбора персонажа.
handleScreen :: Event -> Screen -> Screen

-- | Обновление экрана. Поскольку все изменения происходят по событиям, эта
--   функция ничего не делает.
updateScreen :: Float -> Screen -> Screen

-- | Ширина экрана.
screenWidth :: Num a => a

-- | Высота экрана.
screenHeight :: Num a => a

-- | Масштаб отрисовки персонажа.
charSize :: Float

-- | Положение панели настроек.
panelOffset :: (Float, Float)

-- | Положение персонажа.
charOffset :: (Float, Float)

-- | Максимальное суммарное значение атрибутов.
maxAttrsTotal :: Int
